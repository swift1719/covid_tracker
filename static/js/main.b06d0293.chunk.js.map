{"version":3,"sources":["components/chart/chart.module.css","components/countryPicker/countryPicker.module.css","components/card/cards.module.css","components/card/cards.js","api/index.js","components/chart/chart.js","components/countryPicker/countryPicker.js","images/covid19_image.png","app.js","index.js","app.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","country","active","carddetails","style","styles","infected","text","value","bottomText","className","container","Grid","spacing","justify","map","detail","index","item","component","Card","xs","md","cx","margin","padding","CardContent","Typography","color","gutterBottom","variant","start","end","duration","separator","Date","toDateString","toLocaleTimeString","url","fetchData","a","updatedUrl","axios","get","console","log","fetchDailyData","modifiedData","dailyData","total","date","reportDate","fetchCountries","countries","name","Chart","lineChart","useState","setDailyData","useEffect","fetchAPI","length","labels","datasets","label","borderColor","fill","backgroundColor","barChart","hoverBackgroundColor","options","legend","display","title","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","formControl","NativeSelect","defaultValue","onChange","e","target","key","App","state","fetchedData","setState","this","image","src","coronaImage","alt","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b06d0293.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"chart_container__1ysml\",\"image\":\"chart_image__2aVQD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"countryPicker_formControl__23YES\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"cards_container__1ymMc\",\"card\":\"cards_card__1_9yT\",\"infected\":\"cards_infected__1tAyz\",\"recovered\":\"cards_recovered__3YtYO\",\"deaths\":\"cards_deaths__3ej4R\",\"active\":\"cards_active__3MsPM\"};","import React from 'react';\r\nimport {Card,CardContent,Typography,Grid} from '@material-ui/core';\r\nimport styles from './cards.module.css';\r\nimport CountUp from 'react-countup';\r\nimport cx from 'classnames';\r\n// Cards component is a purely functional component that returns JSX. \r\n// I calculated the active cases by subtracting the recovered cases and death cases from confirmed cases.\r\nconst Cards = ({\r\n    data: { confirmed, recovered, deaths, lastUpdate },\r\n    country,\r\n  }) => {\r\n    if (!confirmed) {\r\n      return \"Loading...\";\r\n    }\r\n    const active = confirmed[\"value\"] - recovered[\"value\"] - deaths[\"value\"];\r\n    let carddetails = [\r\n      {\r\n        style: styles.infected,\r\n        text: \"Infected\",\r\n        value: confirmed.value,\r\n        bottomText: \"Number of infect cases of COVID-19\",\r\n      },\r\n      {\r\n        style: styles.recovered,\r\n        text: \"Recovered\",\r\n        value: recovered.value,\r\n        bottomText: \"Number of recoveries from COVID-19\",\r\n      },\r\n      {\r\n        style: styles.deaths,\r\n        text: \"Deaths\",\r\n        value: deaths.value,\r\n        bottomText: \"Number of deaths caused by COVID-19\",\r\n      },\r\n      {\r\n        style: styles.active,\r\n        text: \"Active\",\r\n        value: active,\r\n        bottomText: \"Number of active cases of COVID-19\",\r\n      },\r\n    ];\r\n    return (\r\n      <div className={styles.container}>\r\n        <Grid container spacing={3} justify=\"center\">\r\n          {carddetails.map((detail, index) => (\r\n            <Grid\r\n              item\r\n              component={Card}\r\n              xs={12}\r\n              md={2}\r\n              className={cx(styles.Card, detail.style)}\r\n              key={index}\r\n              style={{ margin: \"0px 23.675px\", padding: \"12px\" }}\r\n            >\r\n              <CardContent>\r\n                <Typography color=\"textPrimary\" gutterBottom>\r\n                  <b>{detail.text}</b>\r\n                </Typography>\r\n                <Typography variant=\"h5\">\r\n                  <CountUp\r\n                    start={0}\r\n                    end={detail.value}\r\n                    duration={2}\r\n                    separator=\",\"\r\n                  />\r\n                </Typography>\r\n                <Typography color=\"textPrimary\">Last Updated at : </Typography>\r\n                <Typography color=\"textSecondary\" variant=\"body2\">\r\n                  {new Date(lastUpdate).toDateString()}\r\n                </Typography>\r\n                <Typography color=\"textSecondary\" variant=\"body2\">\r\n                  {new Date(lastUpdate).toLocaleTimeString()}\r\n                </Typography>\r\n                <Typography variant=\"body2\">{detail.bottomText}</Typography>\r\n                <Typography color=\"textPrimary\"> {country} </Typography>\r\n              </CardContent>\r\n            </Grid>\r\n          ))}\r\n        </Grid>\r\n      </div>\r\n    );\r\n  };\r\n  \r\n  export default Cards;","import axios from 'axios';\r\n\r\nconst url=\"https://covid19.mathdro.id/api\";\r\n// function to fetch the confirmed, recovered, and death details with last updated time\r\n// according to the worldwide or according to the country wise. \r\n//fetchData function helps to fetch the data to display the results in the Cards component.\r\nexport const fetchData = async (country)=>{\r\n    let updatedUrl=url;\r\n    if(country){\r\n        updatedUrl=`${url}/countries/${country}`;\r\n    }\r\n\r\n    try {\r\n        const{\r\n            data:{\r\n                confirmed,\r\n                recovered,\r\n                deaths,\r\n                lastUpdate\r\n            },\r\n        } = await axios.get(updatedUrl);\r\n\r\n        return{\r\n            confirmed,\r\n            recovered,\r\n            deaths,\r\n            lastUpdate,\r\n        };\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n//return response object having daily global data\r\n// function to fetch the daily total deaths and total confirmed details with the respective dates.\r\n// fetchDailyData function helps to fetch the data to display the results in the Chart component.\r\nexport const fetchDailyData = async ()=>{\r\n    try {\r\n        const {data} = await axios.get(`${url}/daily`);\r\n        const modifiedData = data.map((dailyData)=>({\r\n            confirmed: dailyData.confirmed.total,\r\n            deaths : dailyData.deaths.total,\r\n            date : dailyData.reportDate,\r\n        }));\r\n        return modifiedData;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n// function to fetch all countries\r\n// fetchCountries function is to map the country’s shortened name with the Country’s name. \r\n// fetchCountries function helps to fetch the country name to display the results in the CountryPicker component.\r\nexport const fetchCountries = async ()=>{\r\n    //returns an object containing an array of countries objects\r\n    try {\r\n        const{\r\n            data:{\r\n                countries\r\n            },\r\n        } = await axios.get(`${url}/countries`);\r\n        return countries.map((country)=>country.name);\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React,{useState,useEffect} from 'react';\r\nimport {fetchDailyData} from '../../api';\r\nimport {Line,Bar} from \"react-chartjs-2\";\r\nimport styles from './chart.module.css';\r\n\r\nconst Chart = ({ data: { confirmed, recovered, deaths }, country }) => {\r\n    let lineChart;\r\n    const [dailyData, setDailyData] = useState([]);\r\n    useEffect(() => {\r\n      const fetchAPI = async () => {\r\n        setDailyData(await fetchDailyData());\r\n      };\r\n      fetchAPI();\r\n    }, []);\r\n    if(dailyData){\r\n    lineChart = dailyData.length ? (\r\n      <Line\r\n        data={{\r\n          labels: dailyData.map(({ date }) => date),\r\n          datasets: [\r\n            {\r\n              data: dailyData.map(({ confirmed }) => confirmed),\r\n              label: \"Infected\",\r\n              borderColor: \"#3333ff\",\r\n              fill: true,\r\n            },\r\n            {\r\n              data: dailyData.map(({ deaths }) => deaths),\r\n              label: \"Deaths\",\r\n              borderColor: \"red\",\r\n              backgroundColor: \"rgba(255,0,0,0.5)\",\r\n              fill: true,\r\n            },\r\n          ],\r\n        }}\r\n      />\r\n    ) : null;\r\n      }\r\n  \r\n    const barChart = confirmed ? (\r\n      <Bar\r\n        data={{\r\n          labels: [\"Infected\", \"Recovered\", \"Deaths\", \"Active\"],\r\n          datasets: [\r\n            {\r\n              label: \"People\",\r\n              backgroundColor: [\r\n                \"rgba(0, 0, 255, 0.5)\",\r\n                \"rgba(0, 255, 0, 0.5)\",\r\n                \"rgba(255, 0, 0, 0.5)\",\r\n                \"rgba(242, 234, 0, 0.5)\",\r\n              ],\r\n              hoverBackgroundColor: [\r\n                \"rgba(0, 77, 153)\",\r\n                \"rgba(30, 102, 49)\",\r\n                \"rgba(255, 51, 51)\",\r\n                \"rgba(204, 153, 0)\",\r\n              ],\r\n              data: [\r\n                confirmed.value,\r\n                recovered.value,\r\n                deaths.value,\r\n                confirmed.value - (recovered.value + deaths.value),\r\n              ],\r\n            },\r\n          ],\r\n        }}\r\n        options={{\r\n          legend: { display: false },\r\n          title: { display: true, text: `Current state in ${country}` },\r\n        }}\r\n      />\r\n    ) : null;\r\n  \r\n    return (\r\n      <div className={styles.container}>{country ? barChart : lineChart}</div>\r\n    );\r\n  };\r\n  \r\n  export default Chart;","import React,{useState,useEffect} from 'react';\r\nimport {NativeSelect,FormControl} from '@material-ui/core';\r\nimport styles from './countryPicker.module.css';\r\nimport {fetchCountries} from '../../api';\r\n\r\n// Drop down to select a country based on the selected country showing a bar chart and \r\n// showing cards with death, confirmed, active, and recovered details for that particular country. \r\nconst CountryPicker = ({ handleCountryChange }) => {\r\n    const [fetchedCountries, setFetchedCountries] = useState([]);\r\n    useEffect(() => {\r\n      const fetchAPI = async () => {\r\n        setFetchedCountries(await fetchCountries());\r\n      };\r\n      fetchAPI();\r\n    }, [setFetchedCountries]);\r\n  \r\n    return (\r\n      <FormControl className={styles.formControl}>\r\n        <NativeSelect\r\n          defaultValue=\"\"\r\n          onChange={(e) => handleCountryChange(e.target.value)}\r\n        >\r\n          <option value=\"\">Global</option>\r\n          {fetchedCountries.map((country, key) => (\r\n            <option key={key} value={country}>\r\n              {country}\r\n            </option>\r\n          ))}\r\n        </NativeSelect>\r\n      </FormControl>\r\n    );\r\n  };\r\n  \r\n  export default CountryPicker;","export default __webpack_public_path__ + \"static/media/covid19_image.9e5d4fc7.png\";","import React from 'react';\r\nimport {Cards,Chart,CountryPicker} from './components';\r\nimport styles from './app.module.css';\r\nimport {fetchData} from './api';\r\nimport coronaImage from './images/covid19_image.png';\r\n\r\n// Component is responsible for sending country & data together into a single view so the website \r\n// can dynamically change based on the country’s selection whether to show a bar chart or line chart.\r\n// App Component is a class component that has asynchronous React lifecycle method componentDidMount.\r\nclass App extends React.Component{\r\n    state={\r\n        data:{},\r\n        country:\"\",\r\n    };\r\n    \r\n    async componentDidMount(){\r\n        const fetchedData=await fetchData();\r\n        this.setState({data:fetchedData});\r\n    }\r\n    handleCountryChange=async (country)=>{\r\n        const fetchedData=await fetchData(country);\r\n        this.setState({data:fetchedData,country:country});\r\n    }\r\n\r\n    render(){\r\n        const {data,country}=this.state;\r\n        return(\r\n            <div className={styles.container}>\r\n                <img className={styles.image} src={coronaImage} alt=\"COVID-19\"/>\r\n                \r\n                <br/>\r\n                <p>\r\n                    <strong>Global and Country Wise COVID-19 cases</strong>\r\n                </p>\r\n                <p>\r\n                <i>(For a Particular country, select a Country from below)</i>\r\n                </p>\r\n                <CountryPicker handleCountryChange={this.handleCountryChange}/>\r\n                <Cards data={data} country={country}/>\r\n                <Chart data={data} country={country}/>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app';\r\n\r\nReactDOM.render(\r\n    <App/>,\r\n    document.getElementById(\"root\")\r\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"app_container__3fqwS\",\"image\":\"app_image__UidJD\"};"],"sourceRoot":""}